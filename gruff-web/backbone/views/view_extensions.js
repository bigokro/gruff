// Generated by CoffeeScript 1.11.1
(function() {
  _.extend(Backbone.View.prototype, {
    moveDebate: function(dragged, target, view) {
      var debate, newCollection, oldCollection, ref, targetDebate, targetDebateId, targetParent;
      targetParent = $(target).parents('.debate-list-item, .debate')[0];
      targetDebateId = targetParent.id;
      targetDebate = this.model.findDebate(targetDebateId);
      newCollection = targetDebate.getCollectionByName(target.attr('class'));
      if (newCollection == null) {
        newCollection = targetDebate.getCollectionByName(targetParent.className);
      }
      if (dragged.id === ((ref = newCollection.parent) != null ? ref.id : void 0)) {
        alert("Error: the page is attempting to assign the debate to its own sublist!");
        return false;
      }
      debate = this.model.findDebate(dragged.id);
      oldCollection = debate.parentCollection;
      oldCollection.remove(debate);
      newCollection.add(debate);
      debate.parent = newCollection.parent;
      return oldCollection.parent.save(null, {
        wait: true,
        error: (function(_this) {
          return function(debate, jqXHR) {
            return _this.handleRemoteError(jqXHR);
          };
        })(this),
        success: (function(_this) {
          return function() {
            return debate.save(null, {
              wait: true,
              error: function(debate, jqXHR) {
                return _this.handleRemoteError(jqXHR);
              },
              success: function() {
                if (oldCollection.parent !== newCollection.parent) {
                  return newCollection.parent.save(null, {
                    wait: true,
                    error: function(debate, jqXHR) {
                      return _this.handleRemoteError(jqXHR);
                    }
                  });
                }
              }
            });
          };
        })(this)
      });
    },
    isDragging: function() {
      return $('.ui-draggable-dragging').length > 0;
    },
    handleRemoteError: function(jqXHR, data) {
      var message, ref;
      message = $.parseJSON(jqXHR.responseText);
      if (((ref = message[0]) != null ? ref.message : void 0) != null) {
        message = message[0].message;
      }
      if (jqXHR.status === 401) {
        alert(message);
        return this.showLoginForm();
      } else {
        alert(message);
        return this.model.set({
          errors: $.parseJSON(jqXHR.responseText)
        });
      }
    },
    showLoginForm: function() {
      var form;
      form = new Gruff.Views.Login.LoginView;
      return form.render();
    },
    formatText: function(text) {
      var html;
      if (!(text && (text != null))) {
        return "";
      }
      html = text.replace(/\n[*]([^\n]+)/g, "<ul><li>$1</li></ul>");
      html = html.replace(/<\/ul><ul>/g, "");
      html = html.replace(/\n[#]([^\n]+)/g, "<ol><li>$1</li></ol>");
      html = html.replace(/<\/ol><ol>/g, "");
      html = html.replace(/\n\w*\n/g, "</p><p>");
      html = html.replace(/\n/g, "<br/>");
      html = html.replace(/(https?[:]\/\/[^\s)]+)/g, "<a href=\"$1\" target=\"_blank\">$1</a>");
      html = "<p>" + html + "</p>";
      return html;
    }
  });

}).call(this);
