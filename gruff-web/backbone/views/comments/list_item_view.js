// Generated by CoffeeScript 1.11.1
(function() {
  var base,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  (base = Gruff.Views).Comments || (base.Comments = {});

  Gruff.Views.Comments.ListItemView = (function(superClass) {
    extend(ListItemView, superClass);

    function ListItemView() {
      this.updateScore = bind(this.updateScore, this);
      this.voteDown = bind(this.voteDown, this);
      this.voteUp = bind(this.voteUp, this);
      this.close = bind(this.close, this);
      this.removeComment = bind(this.removeComment, this);
      this.textIndex = bind(this.textIndex, this);
      this.reindex = bind(this.reindex, this);
      this.mergeSegments = bind(this.mergeSegments, this);
      this.addNewSegment = bind(this.addNewSegment, this);
      this.hideDelete = bind(this.hideDelete, this);
      this.showDelete = bind(this.showDelete, this);
      this.setUpEvents = bind(this.setUpEvents, this);
      return ListItemView.__super__.constructor.apply(this, arguments);
    }

    ListItemView.prototype.initialize = function(options) {
      var ref;
      this.template = _.template($('#comments-list-item-template').text());
      this.parentEl = options.parentEl;
      this.parentView = options.parentView;
      this.parentModel = options.parentModel;
      this.parentModel || (this.parentModel = (ref = this.parentView) != null ? ref.parentModel : void 0);
      return this.debate = options.debate;
    };

    ListItemView.prototype.render = function() {
      var json;
      if (!this.model.id) {
        this.model.set({
          id: this.model.nextId()
        });
      }
      json = this.model.fullJSON();
      $(this.parentEl).append(this.template(json));
      this.el = $(this.parentEl).find('#' + this.model.id + '-comment');
      this.bodyEl = this.$('> .comment');
      this.deleteEl = this.$("> a.delete-comment");
      this.body = this.model.get("body");
      this.segmentViews = [];
      _.each(this.body, (function(_this) {
        return function(segment, index) {
          return _this.addNewSegment(segment, index);
        };
      })(this));
      this.setUpEvents();
      return this;
    };

    ListItemView.prototype.setUpEvents = function() {
      this.deleteEl.bind("click", this.removeComment);
      this.$('.vote-up a').bind('click', this.voteUp);
      this.$('.vote-down a').bind('click', this.voteDown);
      return this.$('.cancel-vote a').bind('click', this.cancelVote);
    };

    ListItemView.prototype.showDelete = function() {
      return this.deleteEl.show();
    };

    ListItemView.prototype.hideDelete = function() {
      return this.deleteEl.hide();
    };

    ListItemView.prototype.addNewSegment = function(segment, index) {
      var segmentView;
      segmentView = new Gruff.Views.Comments.SegmentView({
        'parentEl': this.bodyEl,
        'model': this.model,
        'segment': segment,
        'parentView': this,
        'index': index,
        'debate': this.debate
      });
      segmentView.render();
      if (index === this.segmentViews.length) {
        this.segmentViews.push(segmentView);
      } else {
        this.segmentViews = _.first(this.segmentViews, index - 1).concat(segmentView).concat(_.rest(this.segmentViews, index));
      }
      return segmentView;
    };

    ListItemView.prototype.mergeSegments = function(index) {
      var first, second;
      first = this.segmentViews[index];
      second = this.segmentViews[index + 1];
      second.segment.text = first.segment.text + second.segment.text;
      second.segment.comments = first.segment.comments.concat(second.segment.comments);
      second.updateText();
      first.close();
      this.segmentViews = _.without(this.segmentViews, first);
      return this.reindex();
    };

    ListItemView.prototype.reindex = function() {
      return _.each(this.segmentViews, (function(_this) {
        return function(sv, index) {
          return sv.index = index;
        };
      })(this));
    };

    ListItemView.prototype.textIndex = function(index) {
      var idx, j, results;
      idx = 0;
      _.each((function() {
        results = [];
        for (var j = 0; 0 <= index ? j <= index : j >= index; 0 <= index ? j++ : j--){ results.push(j); }
        return results;
      }).apply(this), (function(_this) {
        return function(i) {
          return idx += _this.segmentViews[i].segment.text.length;
        };
      })(this));
      return idx;
    };

    ListItemView.prototype.removeComment = function() {
      return this.model.destroy({
        success: (function(_this) {
          return function(comment) {
            return _this.close();
          };
        })(this),
        error: (function(_this) {
          return function(comment, jqXHR) {
            return _this.handleRemoteError(jqXHR, comment);
          };
        })(this)
      });
    };

    ListItemView.prototype.close = function() {
      _.each(this.segmentViews, (function(_this) {
        return function(segmentView) {
          return segmentView.close();
        };
      })(this));
      this.el.remove();
      return this.unbind();
    };

    ListItemView.prototype.voteUp = function() {
      return this.model.voteUp({
        success: (function(_this) {
          return function(comment) {
            _this.model.set(comment);
            return _this.updateScore();
          };
        })(this),
        error: (function(_this) {
          return function(jqXHR, data) {
            return _this.handleRemoteError(jqXHR, data);
          };
        })(this)
      });
    };

    ListItemView.prototype.voteDown = function() {
      return this.model.voteDown({
        success: (function(_this) {
          return function(comment) {
            _this.model.set(comment);
            return _this.updateScore();
          };
        })(this),
        error: (function(_this) {
          return function(jqXHR, data) {
            return _this.handleRemoteError(jqXHR, data);
          };
        })(this)
      });
    };

    ListItemView.prototype.updateScore = function() {
      return this.$('> .info > .score').html(this.model.score());
    };

    return ListItemView;

  })(Backbone.View);

}).call(this);
