// Generated by CoffeeScript 1.11.1
(function() {
  var base,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  (base = Gruff.Views).Comments || (base.Comments = {});

  Gruff.Views.Comments.NewSubcommentView = (function(superClass) {
    extend(NewSubcommentView, superClass);

    function NewSubcommentView() {
      this.handleKeys = bind(this.handleKeys, this);
      this.close = bind(this.close, this);
      this.cancel = bind(this.cancel, this);
      this.save = bind(this.save, this);
      this.cancelEvents = bind(this.cancelEvents, this);
      this.setUpEvents = bind(this.setUpEvents, this);
      this.render = bind(this.render, this);
      return NewSubcommentView.__super__.constructor.apply(this, arguments);
    }

    NewSubcommentView.prototype.initialize = function(options) {
      this.template = _.template($('#comment-new-subcomment-template').text());
      this.segment = options.segment;
      this.parentEl = options.parentEl;
      this.parentView = options.parentView;
      return this.debate = options.debate;
    };

    NewSubcommentView.prototype.render = function() {
      var json;
      json = {};
      $(this.parentEl).append(this.template(json));
      this.el = $(this.parentEl).find('#new-subcomment-form');
      this.formEl = this.$('#subcomment');
      this.setUpEvents();
      this.formEl.focus();
      return this;
    };

    NewSubcommentView.prototype.setUpEvents = function() {
      $(document).bind("keydown", this.handleKeys);
      this.$("input[type='submit']:visible").bind('click', this.save);
      return this.$('.cancel_button:visible').bind('click', this.cancel);
    };

    NewSubcommentView.prototype.cancelEvents = function() {
      return $(document).unbind("keydown", this.handleKeys);
    };

    NewSubcommentView.prototype.save = function(e) {
      e.preventDefault();
      e.stopPropagation();
      return $.ajax({
        type: "POST",
        url: "/rest/debates/" + this.debate.id + "/comments/" + this.model.id + "/" + this.parentView.textIndex(),
        data: {
          comment: this.formEl.val()
        },
        success: (function(_this) {
          return function(data) {
            var comment, commentView;
            _this.close();
            data.debate = _this.debate;
            comment = new Gruff.Models.Comment(data);
            commentView = new Gruff.Views.Comments.ListItemView({
              'parentEl': _this.parentView.el,
              'debate': _this.debate,
              'model': comment,
              'parentView': _this.parentView
            });
            return commentView.render();
          };
        })(this),
        error: (function(_this) {
          return function(jqXHR, data) {
            return _this.handleRemoteError(jqXHR, data);
          };
        })(this)
      });
    };

    NewSubcommentView.prototype.cancel = function() {
      this.close();
      return this.parentView.mergeBack();
    };

    NewSubcommentView.prototype.close = function() {
      $(this.el).remove();
      this.cancelEvents();
      return this.unbind();
    };

    NewSubcommentView.prototype.handleKeys = function(e) {
      if (e.keyCode === 27) {
        this.cancel();
        return false;
      } else {
        return true;
      }
    };

    return NewSubcommentView;

  })(Backbone.View);

}).call(this);
