// Generated by CoffeeScript 1.11.1
(function() {
  var base,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  (base = Gruff.Views).Comments || (base.Comments = {});

  Gruff.Views.Comments.IndexView = (function(superClass) {
    extend(IndexView, superClass);

    function IndexView() {
      this.remove = bind(this.remove, this);
      this.add = bind(this.add, this);
      this.close = bind(this.close, this);
      this.hideForm = bind(this.hideForm, this);
      this.showForm = bind(this.showForm, this);
      return IndexView.__super__.constructor.apply(this, arguments);
    }

    IndexView.prototype.initialize = function(options) {
      this.template = _.template($('#comments-index-template').text());
      this.collection.bind('add', this.add);
      this.collection.bind('remove', this.remove);
      this.parentView = options.parentView;
      this.parentModel = this.collection.parent;
      return this.debate = options.debate;
    };

    IndexView.prototype.render = function() {
      var json;
      json = {};
      json.id = this.parentModel.id;
      json.curruser = Gruff.User.fullJSON();
      $(this.el).html(this.template(json));
      this.showFormEl = this.$(".new-comment-link");
      this.listEl = this.$('.comments-list');
      this.formEl = $('#' + this.parentModel.id + '-new-comment-div');
      this.views = [];
      this.collection.each((function(_this) {
        return function(comment) {
          return _this.add(comment);
        };
      })(this));
      this.initializeForm();
      this.setUpEvents();
      this.hideForm();
      return this;
    };

    IndexView.prototype.initializeForm = function() {
      this.model = new this.collection.model();
      this.model.collection = this.collection;
      return this.model.parent = this.parentModel;
    };

    IndexView.prototype.setUpEvents = function() {
      return this.showFormEl.bind('click', this.showForm);
    };

    IndexView.prototype.showForm = function() {
      this.showFormEl.hide();
      this.formEl.show();
      this.formView = new Gruff.Views.Comments.NewView({
        'el': this.formEl,
        'collection': this.collection,
        'debate': this.debate
      });
      this.formView.render();
      return false;
    };

    IndexView.prototype.hideForm = function() {
      var ref;
      if ((ref = this.formView) != null) {
        ref.close();
      }
      this.showFormEl.show();
      return false;
    };

    IndexView.prototype.close = function() {
      _.each(this.views, function(view) {
        return view.close();
      });
      $(this.el).html('');
      return this.unbind();
    };

    IndexView.prototype.add = function(comment) {
      var commentView;
      comment.collection = this.collection;
      commentView = new Gruff.Views.Comments.ListItemView({
        'parentEl': this.listEl,
        'debate': this.debate,
        'model': comment,
        'parentView': this
      });
      this.views.push(commentView);
      return commentView.render();
    };

    IndexView.prototype.remove = function(comment) {
      var viewToRemove;
      viewToRemove = _.select(this.views, (function(_this) {
        return function(view) {
          var ref;
          return ((ref = view.model) != null ? ref.name : void 0) === comment.name;
        };
      })(this))[0];
      this.views = _.without(this.views, viewToRemove);
      return viewToRemove.close();
    };

    return IndexView;

  })(Backbone.View);

}).call(this);
