// Generated by CoffeeScript 1.11.1
(function() {
  var base, base1,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  (base = Gruff.Views).Debates || (base.Debates = {});

  (base1 = Gruff.Views.Debates).ShowViews || (base1.ShowViews = {});

  Gruff.Views.Debates.ShowView = (function(superClass) {
    extend(ShowView, superClass);

    function ShowView() {
      this.selectClicked = bind(this.selectClicked, this);
      this.selectEl = bind(this.selectEl, this);
      this.selectRight = bind(this.selectRight, this);
      this.selectLeft = bind(this.selectLeft, this);
      this.changeSelection = bind(this.changeSelection, this);
      this.selectNext = bind(this.selectNext, this);
      this.selectPrevious = bind(this.selectPrevious, this);
      this.setSelected = bind(this.setSelected, this);
      this.getTypeHeading = bind(this.getTypeHeading, this);
      this.setChildView = bind(this.setChildView, this);
      this.maximize = bind(this.maximize, this);
      this.minimize = bind(this.minimize, this);
      this.showComments = bind(this.showComments, this);
      this.showDebate = bind(this.showDebate, this);
      this.showEditDescriptionForm = bind(this.showEditDescriptionForm, this);
      this.showEditTitleForm = bind(this.showEditTitleForm, this);
      this.toggleDescription = bind(this.toggleDescription, this);
      this.enableDragDrop = bind(this.enableDragDrop, this);
      this.disableDragDrop = bind(this.disableDragDrop, this);
      this.setUpZoomLinkDragDrop = bind(this.setUpZoomLinkDragDrop, this);
      this.setUpDragDrop = bind(this.setUpDragDrop, this);
      this.handleModelChanges = bind(this.handleModelChanges, this);
      this.handleKeys = bind(this.handleKeys, this);
      this.cancelHandleKeys = bind(this.cancelHandleKeys, this);
      this.setUpHandleKeys = bind(this.setUpHandleKeys, this);
      this.setUpMaximizeEvents = bind(this.setUpMaximizeEvents, this);
      this.setUpMinimizeEvents = bind(this.setUpMinimizeEvents, this);
      this.setUpEvents = bind(this.setUpEvents, this);
      this.setUpEls = bind(this.setUpEls, this);
      this.showNewCommentForm = bind(this.showNewCommentForm, this);
      this.showNewReferenceForm = bind(this.showNewReferenceForm, this);
      this.closeNewDebateForm = bind(this.closeNewDebateForm, this);
      this.showNewDebateForm = bind(this.showNewDebateForm, this);
      this.indentTitle = bind(this.indentTitle, this);
      this.createParentView = bind(this.createParentView, this);
      this.renderParents = bind(this.renderParents, this);
      this.renderComments = bind(this.renderComments, this);
      this.renderReferences = bind(this.renderReferences, this);
      this.renderTags = bind(this.renderTags, this);
      return ShowView.__super__.constructor.apply(this, arguments);
    }

    ShowView.prototype.initialize = function(options) {
      this.template = _.template($('#debate-show-template').text());
      this.childView = options.childView;
      if (this.childView != null) {
        this.childView.parentView = this;
      }
      this.parentView = options.parentView;
      if (this.parentView != null) {
        this.parentView.setChildView(this);
      }
      this.loaded = false;
      this.status = "unrendered";
      this.subdebateListsSelector = "> .arguments > .for, > .arguments > .against, > .subdebates, > .answers";
      this.subdebatesSelector = '> .debates-list > .debate-list-item';
      this.newDebateFormViews || (this.newDebateFormViews = []);
      Gruff.Views.Debates.ShowViews[this.model.id] = this;
      return this.commentsFirst = true;
    };

    ShowView.prototype.render = function() {
      var json;
      json = this.model.fullJSON();
      json.typeHeading = this.getTypeHeading();
      json.bestDescription = this.formatText(json.bestDescription);
      $(this.el).html(this.template(json));
      this.renderTags();
      this.renderReferences();
      this.renderComments();
      this.renderParents();
      this.setUpEls();
      this.setUpEvents();
      this.zoomLink.hide();
      this.status = "rendered";
      return this;
    };

    ShowView.prototype.renderTags = function() {
      this.model.tags = new Gruff.Collections.Tags({
        parent: this.model
      });
      this.model.tags.resetFromArray(this.model.get("tags"));
      this.tagsView = new Gruff.Views.Tags.IndexView({
        el: this.$('> .tags'),
        collection: this.model.tags,
        parentView: this
      });
      return this.tagsView.render();
    };

    ShowView.prototype.renderReferences = function() {
      this.model.references = new Gruff.Collections.References;
      this.model.references.setParent(this.model);
      return this.model.references.fetch({
        success: (function(_this) {
          return function(references, response) {
            _this.referencesView = new Gruff.Views.References.IndexView({
              el: _this.$('> .references'),
              collection: _this.model.references,
              parentView: _this
            });
            return _this.referencesView.render();
          };
        })(this)
      });
    };

    ShowView.prototype.renderComments = function() {
      this.model.comments = new Gruff.Collections.Comments({
        parent: this.model
      });
      this.model.comments.reset(this.model.get("comments"));
      this.commentsView = new Gruff.Views.Comments.IndexView({
        el: this.$('> .comments'),
        collection: this.model.comments,
        parentView: this,
        debate: this.model
      });
      return this.commentsView.render();
    };

    ShowView.prototype.renderParents = function() {
      var parentId, ref, ref1;
      parentId = this.model.get("parentId");
      if ((parentId != null) && (this.model.parent == null)) {
        this.model.parent = new Gruff.Models.Debate({
          "_id": parentId
        });
        return this.model.parent.fetch({
          success: (function(_this) {
            return function(model, response) {
              return _this.createParentView(null);
            };
          })(this)
        });
      } else if (((ref = this.parentView) != null ? ref.model : void 0) !== this.model.parent) {
        return this.createParentView(this.parentView);
      } else {
        if ((ref1 = this.parentView) != null) {
          ref1.setChildView(this);
        }
        return this.indentTitle();
      }
    };

    ShowView.prototype.createParentView = function(parentView) {
      var parentEl, parentId;
      parentId = this.model.get("parentId");
      parentEl = $(this.el).clone();
      parentEl.attr('id', parentId);
      $(this.el).before(parentEl);
      this.parentView = new Gruff.Views.Debates.ShowView({
        'el': parentEl,
        'model': this.model.parent,
        'childView': this,
        'parentView': parentView
      });
      this.parentView.render();
      this.parentView.minimize();
      return this.indentTitle();
    };

    ShowView.prototype.mySubdebateLists = function() {
      return this.$(this.subdebateListsSelector);
    };

    ShowView.prototype.mySubdebates = function() {
      return this.mySubdebateLists().find(this.subdebatesSelector);
    };

    ShowView.prototype.indentTitle = function() {
      var currParent, parents, ref;
      parents = 0;
      currParent = this.model.parent;
      while (currParent != null) {
        parents++;
        currParent = currParent.parent;
      }
      this.$('> div.title').css('margin-left', 5 * parents + '%');
      return (ref = this.childView) != null ? ref.indentTitle() : void 0;
    };

    ShowView.prototype.showNewDebateForm = function(e) {
      var collection, debateType, formDiv, formView;
      debateType = e;
      if (e.target != null) {
        debateType = $(e.target).attr("debate-type");
      }
      collection = this.model[debateType];
      $(e.target).hide();
      formDiv = $('#' + this.model.id + '-new-' + debateType + '-div');
      formDiv.show();
      formView = new Gruff.Views.Debates.NewView({
        'el': formDiv,
        'collection': collection,
        'attributeType': debateType,
        'showView': this
      });
      formView.render();
      return this.newDebateFormViews.push(formView);
    };

    ShowView.prototype.closeNewDebateForm = function(view) {
      return this.newDebateFormViews = _.without(this.newDebateFormViews, view);
    };

    ShowView.prototype.showNewReferenceForm = function(e) {
      return $('.new-reference-link:visible').click();
    };

    ShowView.prototype.showNewCommentForm = function(e) {
      return $('.new-comment-link:visible').click();
    };

    ShowView.prototype.setUpEls = function() {
      this.zoomLink = this.$('> .canvas-title .zoom-link');
      this.debateTab = this.$('> .tabs #tab-debate');
      this.commentsTab = this.$('> .tabs #tab-comments');
      return this.maximizedEls = this.$('> .description, > .tags, > .arguments, > .answers, > .subdebates, > .comments, > .references, > .tabs');
    };

    ShowView.prototype.setUpEvents = function() {
      this.$("> .title").bind("click", this.toggleDescription);
      this.$("> .title").bind("dblclick", this.showEditTitleForm);
      this.$("> .description").bind("dblclick", this.showEditDescriptionForm);
      this.zoomLink.bind("click", this.maximize);
      return this.model.bind("change", this.handleModelChanges);
    };

    ShowView.prototype.setUpMinimizeEvents = function() {
      this.$("> .title").bind("click", this.toggleDescription);
      this.zoomLink.show();
      this.setUpZoomLinkDragDrop();
      return this.cancelHandleKeys();
    };

    ShowView.prototype.setUpMaximizeEvents = function() {
      this.zoomLink.hide();
      this.$("> .title").unbind("click", this.toggleDescription);
      this.$(".new-debate-link").bind("click", this.showNewDebateForm);
      this.$(".selectable").bind("click", this.selectClicked);
      this.debateTab.bind("click", this.showDebate);
      this.commentsTab.bind("click", this.showComments);
      this.setUpDragDrop();
      return this.setUpHandleKeys();
    };

    ShowView.prototype.setUpHandleKeys = function() {
      return $(document).bind('keydown', this.handleKeys);
    };

    ShowView.prototype.cancelHandleKeys = function() {
      return $(document).unbind('keydown', this.handleKeys);
    };

    ShowView.prototype.handleKeys = function(e) {
      if ($("input:focus, textarea:focus").length > 0) {
        return true;
      }
      if (e.ctrlKey || e.metaKey) {
        return true;
      }
      if (e.keyCode === 65) {
        if (this.argumentsForView != null) {
          this.showNewDebateForm("argumentsAgainst");
        } else {
          this.showNewDebateForm("answers");
        }
        return false;
      } else if (e.keyCode === 67) {
        this.showNewCommentForm();
        return false;
      } else if (e.keyCode === 68) {
        if (this.$('> .comments:visible').length > 0) {
          $('.selected > .title > .delete-link').click();
        } else {
          this.showComments();
        }
        return false;
      } else if (e.keyCode === 70) {
        this.showNewDebateForm("argumentsFor");
        return false;
      } else if (e.keyCode === 79) {
        if (this.$('> .comments:visible').length > 0) {
          this.showDebate();
          return false;
        }
      } else if (e.keyCode === 82) {
        this.showNewReferenceForm();
        return false;
      } else if (e.keyCode === 83) {
        this.showNewDebateForm("subdebates");
        return false;
      } else if (e.keyCode === 84) {
        this.tagsView.showForm();
        return false;
      } else if (e.keyCode === 90) {
        $('.selected > .title > .zoom-link, .selected > .zoom-link').click();
        return false;
      } else if (e.keyCode === 13) {
        this.handleEnter();
        return false;
      } else if (e.keyCode === 32) {
        this.handleEnter();
        return false;
      } else if (e.keyCode === 37) {
        this.selectLeft();
        return false;
      } else if (e.keyCode === 38) {
        this.selectPrevious();
        return false;
      } else if (e.keyCode === 39) {
        this.selectRight();
        return false;
      } else if (e.keyCode === 40) {
        this.selectNext();
        return false;
      } else {
        console.log(e.keyCode);
        return true;
      }
    };

    ShowView.prototype.handleEnter = function() {
      var actionEl, linkEl;
      actionEl = $('.selected .selected-enter-action').first();
      linkEl = $('.selected > .title > .title-link');
      if (linkEl.length > 0) {
        return linkEl.click();
      } else if (actionEl.length > 0) {
        return actionEl.click();
      } else {
        return $('.selected').dblclick();
      }
    };

    ShowView.prototype.handleModelChanges = function(model, options) {
      this.$('> .canvas-title > h1 > .attribute-type').html(this.getTypeHeading());
      this.$('> .canvas-title > h1 > .title-text').html(this.model.bestTitleText());
      return this.$('> .description').html(this.formatText(this.model.bestDescriptionText()));
    };

    ShowView.prototype.setUpDragDrop = function() {
      var _this;
      if (Gruff.User.isCurator()) {
        _this = this;
        return this.mySubdebateLists().droppable({
          accept: '.subdebate, .argument, .debate, .answer',
          tolerance: 'pointer',
          drop: function(event, ui) {
            var dragged;
            dragged = ui.draggable[0];
            $(this).removeClass('over');
            if ($(dragged).parent().parent()[0] !== this) {
              _this.moveDebate(dragged, $(this));
              ui.helper.hide();
              return _this.focus();
            }
          },
          over: function(event, ui) {
            var dragged;
            dragged = ui.draggable[0];
            if ($(dragged).parent().parent()[0] !== this) {
              return $(this).addClass('over');
            }
          },
          out: function(event, ui) {
            return $(this).removeClass('over');
          }
        });
      }
    };

    ShowView.prototype.setUpZoomLinkDragDrop = function() {
      if (Gruff.User.isCurator()) {
        return this.$('> .canvas-title').add(this.zoomLink).droppable({
          accept: '.subdebate, .argument, .debate, .answer',
          greedy: true,
          tolerance: 'pointer',
          over: (function(_this) {
            return function(e, ui) {
              _this.$('> .canvas-title').addClass('over');
              return _this.hoverTimeout = setTimeout(function() {
                _this.maximize();
                ui.helper.show();
                return ui.draggable.show();
              }, 500);
            };
          })(this),
          out: (function(_this) {
            return function(e, ui) {
              _this.$('> .canvas-title').removeClass('over');
              return clearTimeout(_this.hoverTimeout);
            };
          })(this),
          drop: (function(_this) {
            return function(event, ui) {
              return alert("Dropping a debate onto the zoom link does nothing");
            };
          })(this)
        });
      }
    };

    ShowView.prototype.disableDragDrop = function() {
      var ref, ref1, ref2, ref3;
      this.mySubdebateLists().droppable("destroy");
      if ((ref = this.argumentsForView) != null) {
        ref.disableDragDrop();
      }
      if ((ref1 = this.argumentsAgainstView) != null) {
        ref1.disableDragDrop();
      }
      if ((ref2 = this.answersView) != null) {
        ref2.disableDragDrop();
      }
      return (ref3 = this.subdebatesView) != null ? ref3.disableDragDrop() : void 0;
    };

    ShowView.prototype.enableDragDrop = function() {
      var ref, ref1, ref2, ref3;
      this.mySubdebateLists().droppable("enable");
      if ((ref = this.argumentsForView) != null) {
        ref.enableDragDrop();
      }
      if ((ref1 = this.argumentsAgainstView) != null) {
        ref1.enableDragDrop();
      }
      if ((ref2 = this.answersView) != null) {
        ref2.enableDragDrop();
      }
      return (ref3 = this.subdebatesView) != null ? ref3.enableDragDrop() : void 0;
    };

    ShowView.prototype.toggleDescription = function(e) {
      this.$('> div.description').toggle();
      return false;
    };

    ShowView.prototype.showEditTitleForm = function(e) {
      e.preventDefault();
      e.stopPropagation();
      clearTimeout(this.clickTimeout);
      this.clickTimeout = null;
      this.editTitleView = new Gruff.Views.Debates.EditTitleView({
        'el': e.target,
        'titleEl': e.target,
        'model': this.model
      });
      return this.editTitleView.render();
    };

    ShowView.prototype.showEditDescriptionForm = function(e) {
      e.preventDefault();
      e.stopPropagation();
      this.editDescriptionView = new Gruff.Views.Debates.EditDescriptionView({
        'el': e.target,
        'descriptionEl': e.target,
        'model': this.model
      });
      return this.editDescriptionView.render();
    };

    ShowView.prototype.showDebate = function() {
      this.commentsTab.removeClass('active');
      this.debateTab.addClass('active');
      this.commentsTab.addClass('selectable');
      this.debateTab.removeClass('selectable');
      this.$('> .comments').hide();
      this.$('> .arguments, > .answers, > .subdebates, > .references').show();
      return false;
    };

    ShowView.prototype.showComments = function() {
      this.commentsTab.addClass('active');
      this.debateTab.removeClass('active');
      this.commentsTab.removeClass('selectable');
      this.debateTab.addClass('selectable');
      this.$('> .comments').show();
      this.$('> .arguments, > .answers, > .subdebates, > .references').hide();
      return false;
    };

    ShowView.prototype.minimize = function() {
      var ref, ref1, ref2, ref3;
      if (this.isOffScreen) {
        this.onScreen();
      } else if (this.status === 'hidden') {
        this.show();
      }
      if ((ref = this.parentView) != null) {
        ref.setChildView(this);
      }
      if ((ref1 = this.parentView) != null) {
        ref1.minimize();
      }
      this.maximizedEls.hide();
      this.setUpMinimizeEvents();
      this.tagsView.hideForm();
      if ((ref2 = this.editTitleView) != null) {
        ref2.close();
      }
      if ((ref3 = this.editDescriptionView) != null) {
        ref3.close();
      }
      _.each(this.newDebateFormViews, function(formView) {
        return formView.close();
      });
      this.newDebateFormViews = [];
      this.status = "minimized";
      return false;
    };

    ShowView.prototype.maximize = function() {
      this.status = "maximized";
      this.focus();
      router.navigate('canvas/' + this.model.id);
      if (this.loaded) {
        this.maximizedEls.show(200);
        if (this.commentsFirst) {
          this.showComments();
        } else {
          this.showDebate();
        }
        return this.setUpMaximizeEvents();
      } else {
        this.model.fetchSubdebates({
          success: (function(_this) {
            return function(subdebates, response) {
              var json, ref;
              _this.maximizedEls.show(200);
              json = _this.model.fullJSON();
              json.objecttype = "debates";
              json.objectid = json.linkableId;
              json.attributetype = "";
              json.attributeid = "";
              json.typeHeading = _this.getTypeHeading();
              json.baseurl = (ref = json.attributetype !== "") != null ? ref : "/" + json.objecttype + "/" + json.objectid + {
                "/tag/": "/" + json.objecttype + "/" + json.objectid + "/" + json.attributetype + "/" + json.attributeid + "/tag/"
              };
              if (_this.model.get("type") === _this.model.DebateTypes.DEBATE) {
                _this.answersView = new Gruff.Views.Debates.ListView({
                  'el': _this.$('.answers .debates-list').first(),
                  'collection': _this.model.answers,
                  'attributeType': 'answers',
                  'parentView': _this,
                  'showView': _this
                });
                _this.answersView.render();
              }
              if (_this.model.get("type") === _this.model.DebateTypes.DIALECTIC) {
                _this.argumentsForView = new Gruff.Views.Debates.ListView({
                  'el': _this.$('> .arguments > .for .debates-list').first(),
                  'collection': _this.model.argumentsFor,
                  'attributeType': 'argumentsFor',
                  'parentView': _this,
                  'showView': _this
                });
                _this.argumentsForView.render();
                _this.argumentsAgainstView = new Gruff.Views.Debates.ListView({
                  'el': _this.$('> .arguments > .against .debates-list').first(),
                  'collection': _this.model.argumentsAgainst,
                  'attributeType': 'argumentsAgainst',
                  'parentView': _this,
                  'showView': _this
                });
                _this.argumentsAgainstView.render();
              }
              _this.subdebatesView = new Gruff.Views.Debates.ListView({
                'el': _this.$('> .subdebates .debates-list').first(),
                'collection': _this.model.subdebates,
                'attributeType': 'subdebates',
                'parentView': _this,
                'showView': _this
              });
              _this.subdebatesView.render();
              if (_this.commentsFirst) {
                _this.showComments();
              } else {
                _this.showDebate();
              }
              _this.setUpMaximizeEvents();
              return _this.loaded = true;
            };
          })(this)
        });
        return false;
      }
    };

    ShowView.prototype.setChildView = function(view) {
      var ref;
      if (this.childView && this.childView !== view) {
        if ((ref = this.childView) != null) {
          ref.hide();
        }
      }
      return this.childView = view;
    };

    ShowView.prototype.close = function() {
      var ref, ref1, ref2, ref3, ref4;
      if ((ref = this.childView) != null) {
        ref.close();
      }
      if ((ref1 = this.argumensForView) != null) {
        ref1.close();
      }
      if ((ref2 = this.argumentsAgainstView) != null) {
        ref2.close();
      }
      if ((ref3 = this.answersView) != null) {
        ref3.close();
      }
      if ((ref4 = this.subdebatesView) != null) {
        ref4.close();
      }
      $(this.el).html('');
      this.status = "closed";
      return this.unbind();
    };

    ShowView.prototype.hide = function() {
      var ref;
      if ((ref = this.childView) != null) {
        ref.hide();
      }
      $(this.el).hide();
      this.status = "hidden";
      return this.cancelHandleKeys();
    };

    ShowView.prototype.show = function() {
      return $(this.el).show(200);
    };

    ShowView.prototype.focus = function() {
      var ref, ref1, ref2;
      if (this.isOffScreen) {
        this.onScreen();
      }
      this.show();
      if ((ref = this.childView) != null) {
        ref.hide();
      }
      if ((ref1 = this.parentView) != null) {
        ref1.setChildView(this);
      }
      if ((ref2 = this.parentView) != null) {
        ref2.minimize();
      }
      return this.setSelected();
    };

    ShowView.prototype.offScreen = function() {
      var childPos, height;
      if (!this.isOffScreen) {
        this.disableDragDrop();
        height = $(this.el).height() - this.$('> .canvas-title').height();
        childPos = $(this.childView.el).offset();
        $(this.childView.el).offset({
          left: childPos.left,
          top: childPos.top - height
        });
        return this.isOffScreen = true;
      }
    };

    ShowView.prototype.onScreen = function() {
      var childPos, height;
      if (this.isOffScreen) {
        this.enableDragDrop();
        height = $(this.el).height() - this.$('> .canvas-title').height();
        childPos = $(this.childView.el).offset();
        $(this.childView.el).offset({
          left: childPos.left,
          top: childPos.top + height
        });
        return this.isOffScreen = false;
      }
    };

    ShowView.prototype.getTypeHeading = function() {
      var result;
      result = "";
      switch (this.model.get("attributeType")) {
        case "argumentsFor":
          result = "For:";
          break;
        case "argumentsAgainst":
          result = "Against:";
          break;
        case "answers":
          result = "Answer:";
          break;
        case "subdebates":
          result = "Sub-debate:";
      }
      return result;
    };

    ShowView.prototype.setSelected = function() {
      return this.selectEl(this.$('> .canvas-title > h1'));
    };

    ShowView.prototype.selectPrevious = function() {
      return this.changeSelection(-1);
    };

    ShowView.prototype.selectNext = function() {
      return this.changeSelection(1);
    };

    ShowView.prototype.changeSelection = function(relativeIdx) {
      var i, j, len, next, nextIdx, selectable, selectables, selected;
      selected = $('.selected');
      if (selected.length > 0) {
        selectables = $('.selectable:visible');
        nextIdx = 0;
        for (i = j = 0, len = selectables.length; j < len; i = ++j) {
          selectable = selectables[i];
          if ($(selectable).hasClass('selected')) {
            nextIdx = i + relativeIdx;
            break;
          }
        }
        nextIdx = (nextIdx + selectables.length) % selectables.length;
        next = selectables[nextIdx];
      } else {
        return this.setSelected();
      }
      return this.selectEl(next);
    };

    ShowView.prototype.selectLeft = function() {
      var left, right;
      right = $('.against.selected:visible');
      if (!(right.length > 0)) {
        right = $('.selected').parents('.against');
      }
      left = right.siblings('.for');
      if (left.length > 0) {
        return this.selectEl(left);
      }
    };

    ShowView.prototype.selectRight = function() {
      var left, right;
      left = $('.for.selected:visible');
      if (!(left.length > 0)) {
        left = $('.selected').parents('.for');
      }
      right = left.siblings('.against');
      if (right.length > 0) {
        return this.selectEl(right);
      }
    };

    ShowView.prototype.selectEl = function(el) {
      var newTop;
      $('.selected').removeClass('selected');
      $(el).addClass('selected');
      newTop = $(el).position().top - ($(window).height() / 2);
      return $(window).scrollTop(newTop);
    };

    ShowView.prototype.selectClicked = function(e) {
      this.selectEl(e.currentTarget);
      return true;
    };

    return ShowView;

  })(Backbone.View);

}).call(this);
