// Generated by CoffeeScript 1.11.1
(function() {
  var base,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  (base = Gruff.Views).Debates || (base.Debates = {});

  Gruff.Views.Debates.ListItemView = (function(superClass) {
    extend(ListItemView, superClass);

    function ListItemView() {
      this["delete"] = bind(this["delete"], this);
      this.resolveZoom = bind(this.resolveZoom, this);
      this.zoom = bind(this.zoom, this);
      this.mergeDebates = bind(this.mergeDebates, this);
      this.handleModelChanges = bind(this.handleModelChanges, this);
      this.setUpDragDrop = bind(this.setUpDragDrop, this);
      this.openModalView = bind(this.openModalView, this);
      this.hideDescription = bind(this.hideDescription, this);
      this.showDescription = bind(this.showDescription, this);
      this.toggleDescription = bind(this.toggleDescription, this);
      this.hideInfo = bind(this.hideInfo, this);
      this.renderSublists = bind(this.renderSublists, this);
      this.showInfo = bind(this.showInfo, this);
      this.doToggleInfo = bind(this.doToggleInfo, this);
      this.toggleInfo = bind(this.toggleInfo, this);
      this.showEditDescriptionForm = bind(this.showEditDescriptionForm, this);
      this.showEditTitleForm = bind(this.showEditTitleForm, this);
      this.cancelEvents = bind(this.cancelEvents, this);
      this.setUpEvents = bind(this.setUpEvents, this);
      return ListItemView.__super__.constructor.apply(this, arguments);
    }

    ListItemView.prototype.initialize = function(options) {
      this.template = _.template($('#debate-list-item-template').text());
      this.parentEl = options.parentEl;
      this.parentView = options.parentView;
      this.showView = options.showView;
      this.attributeType = options.attributeType;
      this.dontShowInfo = false;
      this.model.parent = this.model.collection.parent;
      return this.loaded = false;
    };

    ListItemView.prototype.render = function() {
      var json;
      json = this.model.fullJSON();
      json.bestDescription = this.formatText(json.bestDescription);
      if (this.attributeType === "argumentsFor") {
        json.divClass = "argument argumentFor";
      }
      if (this.attributeType === "argumentsAgainst") {
        json.divClass = "argument argumentAgainst";
      }
      if (this.attributeType === "answers") {
        json.divClass = "answer";
      }
      if (this.attributeType === "subdebates") {
        json.divClass = "subdebate";
      }
      $(this.parentEl).append(this.template(json));
      this.el = $(this.parentEl).find('#' + this.model.linkableId());
      this.setUpEvents();
      this.setUpDragDrop();
      return this;
    };

    ListItemView.prototype.setUpEvents = function() {
      this.$("> h4.title a.title-link").bind("click", this.toggleInfo);
      this.$("> h4.title a.title-link").bind("dblclick", this.showEditTitleForm);
      this.$("> h4.title a.zoom-link").bind("click", this.zoom);
      this.$("> h4.title a.delete-link").bind("click", this["delete"]);
      this.$("> .body").bind("dblclick", this.showEditDescriptionForm);
      return this.model.bind("change", this.handleModelChanges);
    };

    ListItemView.prototype.cancelEvents = function() {
      this.$("> h4.title a.title-link").unbind;
      return this.$("> .body").unbind;
    };

    ListItemView.prototype.showEditTitleForm = function(e) {
      var clickedDebate, clickedDebateId, editTitleView;
      e.preventDefault();
      e.stopPropagation();
      clearTimeout(this.clickTimeout);
      this.clickTimeout = null;
      clickedDebateId = $(e.target).parents('.debate-list-item')[0].id;
      clickedDebate = this.model.findDebate(clickedDebateId);
      editTitleView = new Gruff.Views.Debates.EditTitleView({
        'el': e.target,
        'model': clickedDebate
      });
      return editTitleView.render();
    };

    ListItemView.prototype.showEditDescriptionForm = function(e) {
      var clickedDebate, clickedDebateId, editDescriptionView;
      e.preventDefault();
      e.stopPropagation();
      clickedDebateId = $(e.target).parents('.debate-list-item')[0].id;
      clickedDebate = this.model.findDebate(clickedDebateId);
      editDescriptionView = new Gruff.Views.Debates.EditDescriptionView({
        'el': e.target,
        'model': clickedDebate
      });
      return editDescriptionView.render();
    };

    ListItemView.prototype.toggleInfo = function(e) {
      if (this.clickTimeout != null) {
        return false;
      } else {
        this.clickTimeout = setTimeout((function(_this) {
          return function() {
            _this.doToggleInfo(e);
            return _this.clickTimeout = null;
          };
        })(this), 300);
        return false;
      }
    };

    ListItemView.prototype.doToggleInfo = function(e) {
      var containerEl;
      if (this.model.get("type") === this.model.DebateTypes.DIALECTIC) {
        containerEl = this.$('> div.arguments');
      } else {
        containerEl = this.$('> div.answers');
      }
      if ($(containerEl).css("display") === "none") {
        this.showInfo();
      } else {
        this.hideInfo();
      }
      return false;
    };

    ListItemView.prototype.showInfo = function(e) {
      if (this.dontShowInfo) {
        this.dontShowInfo = false;
        return false;
      }
      if (this.loaded) {
        return this.renderSublists();
      } else {
        return this.model.fetchSubdebates({
          error: (function(_this) {
            return function(debate, jqXHR) {
              return _this.handleRemoteError(jqXHR, debate);
            };
          })(this),
          success: (function(_this) {
            return function(subdebates, response4) {
              return _this.renderSublists();
            };
          })(this)
        });
      }
    };

    ListItemView.prototype.renderSublists = function() {
      var againstEl, answersEl, containerEl, forEl, json;
      if (this.model.get("type") === this.model.DebateTypes.DIALECTIC) {
        containerEl = this.$('> div.arguments');
      } else {
        containerEl = this.$('> div.answers');
      }
      json = this.model.fullJSON();
      if (!$(this.el).hasClass('ui-draggable-dragging')) {
        if (this.model.get("type") === this.model.DebateTypes.DIALECTIC) {
          this.$('div.arguments').show();
          forEl = this.$('> div.arguments > .for .debates-list').first();
          againstEl = this.$('> div.arguments > .against .debates-list').first();
          this.argumentsForView = new Gruff.Views.Debates.MiniListView({
            'el': forEl,
            'collection': this.model.argumentsFor,
            'attributeType': 'argumentsFor',
            'parentView': this,
            'showView': this.showView
          });
          this.argumentsForView.render();
          this.argumentsAgainstView = new Gruff.Views.Debates.MiniListView({
            'el': againstEl,
            'collection': this.model.argumentsAgainst,
            'attributeType': 'argumentsAgainst',
            'parentView': this,
            'showView': this.showView
          });
          this.argumentsAgainstView.render();
        } else {
          answersEl = this.$('> div.answers > .debates-list').first();
          answersEl.show();
          this.answersView = new Gruff.Views.Debates.MiniListView({
            'el': answersEl,
            'collection': this.model.answers,
            'attributeType': 'answers',
            'parentView': this,
            'showView': this.showView
          });
          this.answersView.render();
        }
        this.showDescription();
        containerEl.show(200);
        return this.loaded = true;
      }
    };

    ListItemView.prototype.hideInfo = function() {
      var answersEl, ref, ref1, ref2;
      this.hideDescription();
      if (this.model.get("type") === this.model.DebateTypes.DIALECTIC) {
        this.$('> div.arguments').hide();
        if ((ref = this.argumentsForView) != null) {
          ref.close();
        }
        return (ref1 = this.argumentsAgainstView) != null ? ref1.close() : void 0;
      } else {
        answersEl = this.$('> div.answers').first();
        answersEl.hide();
        return (ref2 = this.answersView) != null ? ref2.close() : void 0;
      }
    };

    ListItemView.prototype.toggleDescription = function(e) {
      if (!$(this.el).hasClass('ui-draggable-dragging')) {
        this.$('> div.body').toggle();
      }
      return false;
    };

    ListItemView.prototype.showDescription = function() {
      return this.$('> div.body').show();
    };

    ListItemView.prototype.hideDescription = function() {
      return this.$('> div.body').hide();
    };

    ListItemView.prototype.openModalView = function(e, ui) {
      this.hideInfo();
      this.showView.toggleSubdebateDiv(this);
      return false;
    };

    ListItemView.prototype.closeModalView = function() {};

    ListItemView.prototype.setUpDragDrop = function() {
      if (Gruff.User.isCurator()) {
        this.$('> h4 a.title-link').droppable({
          accept: '.subdebate, .argument, .debate, .answer',
          hoverClass: 'over',
          greedy: true,
          tolerance: 'pointer',
          over: (function(_this) {
            return function(e, ui) {
              _this.$('> h4').addClass('over');
              return _this.hoverTimeout = setTimeout(function() {
                return _this.doToggleInfo(e, ui);
              }, 500);
            };
          })(this),
          out: (function(_this) {
            return function(e, ui) {
              clearTimeout(_this.hoverTimeout);
              return _this.$('> h4').removeClass('over');
            };
          })(this),
          drop: (function(_this) {
            return function(event, ui) {
              var dragged;
              dragged = ui.draggable[0];
              return _this.mergeDebates(dragged, event.target);
            };
          })(this)
        });
        this.$('> h4 a.zoom-link').droppable({
          accept: '.subdebate, .argument, .debate, .answer',
          greedy: true,
          tolerance: 'pointer',
          over: (function(_this) {
            return function(e, ui) {
              _this.$('> h4').addClass('over');
              return _this.hoverTimeout = setTimeout(function() {
                _this.$('> h4').removeClass('over');
                return _this.zoom();
              }, 500);
            };
          })(this),
          out: (function(_this) {
            return function(e, ui) {
              clearTimeout(_this.hoverTimeout);
              return _this.$('> h4').removeClass('over');
            };
          })(this),
          drop: (function(_this) {
            return function(event, ui) {
              return alert("Dropping a debate onto the zoom link does nothing");
            };
          })(this)
        });
        return $(this.el).draggable({
          revert: true,
          refreshPositions: true,
          distance: 5,
          helper: 'clone',
          appendTo: "body",
          cursorAt: {
            left: 0
          },
          start: (function(_this) {
            return function(e, ui) {
              var cloneEl;
              _this.dontShowInfo = true;
              _this.hideInfo();
              _this.$('> h4').css('opacity', 0);
              cloneEl = ui.helper;
              cloneEl.find('div, a.zoom-link').remove();
              cloneEl.find('div, a.delete-link').remove();
              return cloneEl.attr('id', _this.model.id);
            };
          })(this),
          stop: (function(_this) {
            return function(e, ui) {
              _this.resolveZoom();
              return _this.$('> h4').css('opacity', 1);
            };
          })(this)
        });
      }
    };

    ListItemView.prototype.disableDragDrop = function() {
      if (Gruff.User.isCurator()) {
        this.$('> h4 a.title-link').droppable("disable");
        this.$('> h4 a.zoom-link').droppable("disable");
        return $(this.el).draggable("disable");
      }
    };

    ListItemView.prototype.enableDragDrop = function() {
      if (Gruff.User.isCurator()) {
        this.$('> h4 a.title-link').droppable("enable");
        this.$('> h4 a.zoom-link').droppable("enable");
        return $(this.el).draggable("enable");
      }
    };

    ListItemView.prototype.handleModelChanges = function(model, options) {
      this.$('> h4.title > a.title-link').html(this.model.bestTitleText());
      return this.$('> .description').html(this.formatText(this.model.bestDescriptionText()));
    };

    ListItemView.prototype.close = function() {
      this.el.remove();
      return this.unbind();
    };

    ListItemView.prototype.mergeDebates = function(dragged, target) {
      return alert("Dropping one debate onto another has not yet been implemented");
    };

    ListItemView.prototype.zoom = function() {
      var newShowEl;
      this.myShowView = Gruff.Views.Debates.ShowViews[this.model.id];
      if (this.myShowView != null) {
        this.myShowView.show();
        this.myShowView.maximize();
      } else {
        newShowEl = $(this.showView.el).clone();
        newShowEl.attr('id', this.model.id);
        $(this.showView.el).after(newShowEl);
        this.myShowView = new Gruff.Views.Debates.ShowView({
          'el': newShowEl,
          'model': this.model,
          'parentView': this.showView
        });
        this.myShowView.render();
        this.myShowView.maximize();
      }
      if (this.isDragging()) {
        this.showView.offScreen();
      } else {
        this.showView.minimize();
      }
      return false;
    };

    ListItemView.prototype.resolveZoom = function() {
      return this.showView.maximize();
    };

    ListItemView.prototype["delete"] = function() {
      this.model.destroy({
        error: (function(_this) {
          return function(debate, jqXHR) {
            return _this.handleRemoteError(jqXHR, debate);
          };
        })(this),
        success: (function(_this) {
          return function() {
            return _this.close();
          };
        })(this)
      });
      return false;
    };

    return ListItemView;

  })(Backbone.View);

}).call(this);
