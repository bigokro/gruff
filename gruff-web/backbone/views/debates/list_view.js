// Generated by CoffeeScript 1.11.1
(function() {
  var base,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  (base = Gruff.Views).Debates || (base.Debates = {});

  Gruff.Views.Debates.ListView = (function(superClass) {
    extend(ListView, superClass);

    function ListView() {
      this.remove = bind(this.remove, this);
      this.add = bind(this.add, this);
      return ListView.__super__.constructor.apply(this, arguments);
    }

    ListView.prototype.initialize = function(options) {
      this.attributeType = options.attributeType;
      this.collection.bind('add', this.add);
      this.collection.bind('remove', this.remove);
      this.parentView = options.parentView;
      return this.showView = options.showView;
    };

    ListView.prototype.render = function() {
      this.views = [];
      this.collection.each((function(_this) {
        return function(debate) {
          return _this.add(debate);
        };
      })(this));
      return this;
    };

    ListView.prototype.close = function() {
      return _.each(this.views, function(view) {
        return view.close();
      });
    };

    ListView.prototype.add = function(debate, collection) {
      var itemView;
      debate.parentCollection = this.collection;
      itemView = new Gruff.Views.Debates.ListItemView({
        'parentEl': this.el,
        'model': debate,
        'attributeType': this.attributeType,
        'parentView': this,
        'showView': this.showView
      });
      this.views.push(itemView);
      return itemView.render();
    };

    ListView.prototype.remove = function(debate) {
      var viewToRemove;
      viewToRemove = _.select(this.views, (function(_this) {
        return function(view) {
          var ref;
          return ((ref = view.model) != null ? ref.id : void 0) === debate.id;
        };
      })(this))[0];
      this.views = _.without(this.views, viewToRemove);
      return $(viewToRemove.el).remove();
    };

    ListView.prototype.disableDragDrop = function() {
      return _.each(this.views, function(view) {
        return view.disableDragDrop();
      });
    };

    ListView.prototype.enableDragDrop = function() {
      return _.each(this.views, function(view) {
        return view.enableDragDrop();
      });
    };

    return ListView;

  })(Backbone.View);

}).call(this);
