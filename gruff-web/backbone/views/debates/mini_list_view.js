// Generated by CoffeeScript 1.11.1
(function() {
  var base,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  (base = Gruff.Views).Debates || (base.Debates = {});

  Gruff.Views.Debates.MiniListView = (function(superClass) {
    extend(MiniListView, superClass);

    function MiniListView() {
      this.showNewDebateForm = bind(this.showNewDebateForm, this);
      this.setUpDragDrop = bind(this.setUpDragDrop, this);
      return MiniListView.__super__.constructor.apply(this, arguments);
    }

    MiniListView.prototype.initialize = function(options) {
      return MiniListView.__super__.initialize.call(this, options);
    };

    MiniListView.prototype.render = function() {
      MiniListView.__super__.render.apply(this, arguments);
      this.model = this.collection.parent;
      this.linkEl = $(this.el).next();
      this.linkEl.bind("click", this.showNewDebateForm);
      this.setUpDragDrop();
      return this;
    };

    MiniListView.prototype.close = function() {
      return MiniListView.__super__.close.apply(this, arguments);
    };

    MiniListView.prototype.setUpDragDrop = function() {
      var _this;
      _this = this;
      return $(this.el).parent().droppable({
        accept: '.subdebate, .argument, .debate, .answer',
        greedy: true,
        drop: function(event, ui) {
          var dragged;
          dragged = ui.draggable[0];
          $(this).removeClass('over');
          if ($(dragged).parent().parent()[0] !== this) {
            _this.moveDebate(dragged, $(this));
            return ui.helper.hide();
          }
        },
        over: function(event, ui) {
          var dragged;
          dragged = ui.draggable[0];
          if ($(dragged).parent().parent()[0] !== this) {
            return $(this).addClass('over');
          }
        },
        out: function(event, ui) {
          return $(this).removeClass('over');
        }
      });
    };

    MiniListView.prototype.showNewDebateForm = function(e) {
      this.linkEl.hide();
      this.newView = new Gruff.Views.Debates.SimpleNewView({
        'el': this.el,
        'parentView': this,
        'collection': this.collection,
        'attributeType': this.attributeType
      });
      return this.newView.render();
    };

    return MiniListView;

  })(Gruff.Views.Debates.ListView);

}).call(this);
