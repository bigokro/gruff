// Generated by CoffeeScript 1.11.1
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Gruff.Views || (Gruff.Views = {});

  Gruff.Views.ModalView = (function(superClass) {
    extend(ModalView, superClass);

    function ModalView() {
      this.handleCloseOnEscape = bind(this.handleCloseOnEscape, this);
      this.close = bind(this.close, this);
      return ModalView.__super__.constructor.apply(this, arguments);
    }

    ModalView.prototype.initialize = function(options) {
      return ModalView.__super__.initialize.call(this, options);
    };

    ModalView.prototype.render = function() {
      ModalView.__super__.render.apply(this, arguments);
      this.addDialog();
      this.addBg();
      this.enableCloseOnEscape();
      return this;
    };

    ModalView.prototype.addDialog = function() {
      $("body").append('<div class="modal-dialog card" id="modal-dialog"></div>');
      return this.el = $('#modal-dialog');
    };

    ModalView.prototype.addBg = function() {
      $("body").append('<div class="modal-bg" id="modal-bg"></div>');
      this.bg = $("#modal-bg");
      this.bg.width($(document).width());
      this.bg.height($(document).height());
      return this.bg.offset({
        top: 0,
        left: 0
      });
    };

    ModalView.prototype.close = function() {
      this.bg.remove();
      $(document).unbind('keydown', this.handleCloseOnEscape);
      return this.el.remove();
    };

    ModalView.prototype.enableCloseOnEscape = function() {
      return $(document).bind('keydown', this.handleCloseOnEscape);
    };

    ModalView.prototype.handleCloseOnEscape = function(e) {
      if (e.keyCode === 27) {
        this.close();
        return false;
      } else {
        return true;
      }
    };

    ModalView.prototype.center = function() {
      var left, top;
      left = (($(window).width() - $(this.el).width()) / 2) + $(window).scrollLeft();
      top = (($(window).height() - $(this.el).height()) / 2) + $(window).scrollTop();
      return $(this.el).offset({
        top: top,
        left: left
      });
    };

    return ModalView;

  })(Backbone.View);

}).call(this);
