// Generated by CoffeeScript 1.11.1
(function() {
  var base,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  (base = Gruff.Views).Tags || (base.Tags = {});

  Gruff.Views.Tags.IndexView = (function(superClass) {
    extend(IndexView, superClass);

    function IndexView() {
      this.remove = bind(this.remove, this);
      this.add = bind(this.add, this);
      this.save = bind(this.save, this);
      this.close = bind(this.close, this);
      this.hideForm = bind(this.hideForm, this);
      this.showForm = bind(this.showForm, this);
      this.handleKeys = bind(this.handleKeys, this);
      return IndexView.__super__.constructor.apply(this, arguments);
    }

    IndexView.prototype.initialize = function(options) {
      this.template = _.template($('#tags-index-template').text());
      this.collection.bind('add', this.add);
      this.collection.bind('remove', this.remove);
      this.parentView = options.parentView;
      return this.parentModel = this.collection.parent;
    };

    IndexView.prototype.render = function() {
      var json;
      json = {};
      json.id = this.parentModel.id;
      json.curruser = Gruff.User.fullJSON();
      $(this.el).html(this.template(json));
      this.showFormEl = this.$(".show-add-tag-form a");
      this.formEl = this.$(".add-tag-form");
      this.inputEl = this.formEl.find('input');
      this.hideFormEl = this.formEl.find('a');
      this.views = [];
      this.collection.each((function(_this) {
        return function(tag) {
          return _this.add(tag);
        };
      })(this));
      this.initializeForm();
      this.setUpEvents();
      this.hideForm();
      return this;
    };

    IndexView.prototype.initializeForm = function() {
      this.inputEl.val('');
      this.model = new this.collection.model();
      return this.model.parent = this.parentModel;
    };

    IndexView.prototype.setUpEvents = function() {
      Backbone.ModelBinding.bind(this);
      this.showFormEl.bind('click', this.showForm);
      this.hideFormEl.bind('click', this.hideForm);
      this.inputEl.bind('keydown', this.handleKeys);
      return this.inputEl.autocomplete({
        source: "/rest/tags",
        autoFocus: true
      });
    };

    IndexView.prototype.handleKeys = function(e) {
      if (e.keyCode === 13) {
        this.save();
        false;
      } else if (e.keyCode === 27) {
        this.hideForm();
        false;
      }
      return true;
    };

    IndexView.prototype.showForm = function() {
      this.formEl.show();
      this.showFormEl.hide();
      this.inputEl.focus();
      return false;
    };

    IndexView.prototype.hideForm = function() {
      this.showFormEl.show();
      this.inputEl.blur();
      this.formEl.hide();
      return false;
    };

    IndexView.prototype.close = function() {
      _.each(this.views, function(view) {
        return view.close();
      });
      $(this.el).html('');
      Backbone.ModelBinding.unbind(this);
      return this.unbind();
    };

    IndexView.prototype.save = function() {
      this.model.set({
        name: this.inputEl.val()
      });
      this.model.unset("errors");
      return this.collection.create(this.model.toJSON(), {
        success: (function(_this) {
          return function(tag) {
            _this.initializeForm();
            return _this.hideForm();
          };
        })(this),
        error: (function(_this) {
          return function(tag, jqXHR) {
            return _this.handleRemoteError(jqXHR, tag);
          };
        })(this)
      });
    };

    IndexView.prototype.add = function(tag) {
      var tagView;
      tag.parentCollection = this.collection;
      tagView = new Gruff.Views.Tags.ShowView({
        'parentEl': this.el,
        'model': tag,
        'parentView': this
      });
      this.views.push(tagView);
      return tagView.render();
    };

    IndexView.prototype.remove = function(tag) {
      var viewToRemove;
      viewToRemove = _.select(this.views, (function(_this) {
        return function(view) {
          var ref;
          return ((ref = view.model) != null ? ref.name : void 0) === tag.name;
        };
      })(this))[0];
      this.views = _.without(this.views, viewToRemove);
      return viewToRemove.close();
    };

    return IndexView;

  })(Backbone.View);

}).call(this);
