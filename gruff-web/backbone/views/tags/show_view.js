// Generated by CoffeeScript 1.11.1
(function() {
  var base,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  (base = Gruff.Views).Tags || (base.Tags = {});

  Gruff.Views.Tags.ShowView = (function(superClass) {
    extend(ShowView, superClass);

    function ShowView() {
      this.close = bind(this.close, this);
      this.removeTag = bind(this.removeTag, this);
      this.hideDelete = bind(this.hideDelete, this);
      this.showDelete = bind(this.showDelete, this);
      this.setUpEvents = bind(this.setUpEvents, this);
      return ShowView.__super__.constructor.apply(this, arguments);
    }

    ShowView.prototype.initialize = function(options) {
      var ref;
      this.template = _.template($('#tags-show-template').text());
      this.parentEl = options.parentEl;
      this.parentView = options.parentView;
      this.parentModel = options.parentModel;
      return this.parentModel || (this.parentModel = (ref = this.parentView) != null ? ref.parentModel : void 0);
    };

    ShowView.prototype.render = function() {
      var json;
      json = this.model.fullJSON();
      $(this.parentEl).find('.label').after(this.template(json));
      this.el = $(this.parentEl).find('#' + this.model.get("name").replace(" ", "\\ ") + '-tag');
      this.deleteEl = this.$("> a.delete-tag");
      this.setUpEvents();
      return this;
    };

    ShowView.prototype.setUpEvents = function() {
      $(this.el).bind("mouseover", this.showDelete);
      $(this.el).bind("mouseout", this.hideDelete);
      return this.deleteEl.bind("click", this.removeTag);
    };

    ShowView.prototype.showDelete = function() {
      return this.$('a.delete-tag').addClass('hover');
    };

    ShowView.prototype.hideDelete = function() {
      return this.$('a.delete-tag').removeClass('hover');
    };

    ShowView.prototype.removeTag = function() {
      return this.model.destroy({
        success: (function(_this) {
          return function(tag) {
            return _this.close();
          };
        })(this),
        error: (function(_this) {
          return function(tag, jqXHR) {
            return _this.handleRemoteError(jqXHR, tag);
          };
        })(this)
      });
    };

    ShowView.prototype.close = function() {
      this.el.remove();
      return this.unbind();
    };

    return ShowView;

  })(Backbone.View);

}).call(this);
