// Generated by CoffeeScript 1.11.1
(function() {
  var base, classHelper,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (base = Gruff.Models).References || (base.References = {});

  Gruff.Models.Reference = (function(superClass) {
    extend(Reference, superClass);

    function Reference() {
      return Reference.__super__.constructor.apply(this, arguments);
    }

    Reference.prototype.paramRoot = 'reference';

    Reference.prototype.urlRoot = '/rest/references';

    Reference.prototype.idAttribute = "_id";

    Reference.prototype.defaults = {
      title: null,
      description: null
    };

    Reference.prototype.initialize = function(options) {
      this.collection = options.collection;
      this.updateGlobalHash();
      return this.bind('change', this.updateGlobalHash);
    };

    Reference.prototype.fullJSON = function() {
      var json;
      json = this.toJSON();
      json.bestTitle = this.bestTitleText();
      if (json.bestTitle == null) {
        json.bestTitle = "(no title)";
      }
      json.bestDescription = this.bestDescriptionText();
      json.linkableId = this.linkableId();
      json.curruser = Gruff.User.fullJSON();
      return json;
    };

    Reference.prototype.updateGlobalHash = function() {
      return Gruff.Models.References[this.linkableId()] = this;
    };

    Reference.prototype.findReference = function(id) {
      return Gruff.Models.References[id];
    };

    return Reference;

  })(Backbone.Model);

  Gruff.Collections.References = (function(superClass) {
    extend(References, superClass);

    function References() {
      this.updateUrl = bind(this.updateUrl, this);
      return References.__super__.constructor.apply(this, arguments);
    }

    References.prototype.model = Gruff.Models.Reference;

    References.prototype.url = '/rest/references';

    References.prototype.fullJSON = function() {
      var json;
      json = [];
      this.each((function(_this) {
        return function(reference) {
          return json.push(reference.fullJSON());
        };
      })(this));
      return json;
    };

    References.prototype.setParent = function(parent) {
      this.parent = parent;
      this.updateUrl();
      return this.parent.bind("change", this.updateUrl);
    };

    References.prototype.updateUrl = function(e) {
      return this.url = "/rest/debates/" + this.parent.id + "/references";
    };

    return References;

  })(Backbone.Collection);

  classHelper = new exports.ClassHelper();

  classHelper.augmentClass(Gruff.Models.Reference, exports.Reference);

}).call(this);
