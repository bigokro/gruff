// Generated by CoffeeScript 1.11.1
(function() {
  var base,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  (base = Gruff.Models).Tags || (base.Tags = {});

  Gruff.Models.Tag = (function(superClass) {
    extend(Tag, superClass);

    function Tag() {
      return Tag.__super__.constructor.apply(this, arguments);
    }

    Tag.prototype.paramRoot = '';

    Tag.prototype.idAttribute = "name";

    Tag.prototype.defaults = {
      name: null
    };

    Tag.prototype.initialize = function(options) {
      this.updateUrl();
      return this.bind("change", this.updateUrl);
    };

    Tag.prototype.updateUrl = function(e) {
      var ref, ref1;
      return this.url = "/rest/debates/" + ((ref = this.collection) != null ? (ref1 = ref.parent) != null ? ref1.id : void 0 : void 0) + "/tag/" + this.get("name");
    };

    Tag.prototype.save = function() {
      this.updateUrl();
      return Tag.__super__.save.apply(this, arguments);
    };

    Tag.prototype.fullJSON = function() {
      var json;
      json = this.toJSON();
      json.curruser = Gruff.User.fullJSON();
      return json;
    };

    return Tag;

  })(Backbone.Model);

  Gruff.Collections.Tags = (function(superClass) {
    extend(Tags, superClass);

    function Tags() {
      return Tags.__super__.constructor.apply(this, arguments);
    }

    Tags.prototype.model = Gruff.Models.Tag;

    Tags.prototype.initialize = function(options) {
      var ref;
      this.parent = options.parent;
      return this.url = "/rest/debates/" + ((ref = this.parent) != null ? ref.id : void 0) + "/tags";
    };

    Tags.prototype.resetFromArray = function(arr) {
      var tagArr;
      tagArr = [];
      _.each(arr, function(tag) {
        return tagArr.push({
          name: tag
        });
      });
      return this.reset(tagArr);
    };

    return Tags;

  })(Backbone.Collection);

}).call(this);
