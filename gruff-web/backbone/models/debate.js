// Generated by CoffeeScript 1.11.1
(function() {
  var base, classHelper,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  (base = Gruff.Models).Debates || (base.Debates = {});

  Gruff.Models.Debate = (function(superClass) {
    extend(Debate, superClass);

    function Debate() {
      this.updateUrl = bind(this.updateUrl, this);
      this.initializeDebates = bind(this.initializeDebates, this);
      return Debate.__super__.constructor.apply(this, arguments);
    }

    Debate.prototype.paramRoot = 'debate';

    Debate.prototype.urlRoot = '/rest/debates';

    Debate.prototype.idAttribute = "_id";

    Debate.prototype.defaults = {
      title: null,
      description: null
    };

    Debate.prototype.initialize = function(options) {
      this.normalize();
      this.answers = this.initializeDebates("answers");
      this.argumentsFor = this.initializeDebates("argumentsFor");
      this.argumentsAgainst = this.initializeDebates("argumentsAgainst");
      this.subdebates = this.initializeDebates("subdebates");
      this.parentCollection = options.parentCollection;
      this.updateGlobalHash();
      return this.bind('change', this.updateGlobalHash);
    };

    Debate.prototype.fullJSON = function() {
      var json;
      json = this.toJSON();
      json.bestTitle = this.bestTitleText();
      if (json.bestTitle == null) {
        json.bestTitle = "(no title)";
      }
      json.bestDescription = this.bestDescriptionText();
      json.linkableId = this.linkableId();
      json.titleLink = this.titleLink();
      json.attributeType = this.get("attributeType");
      json.DebateTypes = this.DebateTypes;
      json.curruser = Gruff.User.fullJSON();
      return json;
    };

    Debate.prototype.normalize = function() {
      if (typeof (this.get("answerIds")) === 'undefined' || this.get("answerIds") === null) {
        this.set({
          answerIds: []
        });
      }
      if (typeof (this.get("argumentsForIds")) === 'undefined' || this.get("argumentsForIds") === null) {
        this.set({
          argumentsForIds: []
        });
      }
      if (typeof (this.get("argumentsAgainstIds")) === 'undefined' || this.get("argumentsAgainstIds") === null) {
        this.set({
          argumentsAgainstIds: []
        });
      }
      if (typeof (this.get("subdebateIds")) === 'undefined' || this.get("subdebateIds") === null) {
        return this.set({
          subdebateIds: []
        });
      }
    };

    Debate.prototype.initializeDebates = function(type) {
      var debates;
      debates = new Gruff.Collections.Debates;
      debates.url = "/rest/debates/" + this.id + "/" + type;
      debates.setParent(this);
      debates.type = type;
      debates.bind("add", this.makeAddToCollectionEvent(debates));
      debates.bind("remove", this.makeRemoveFromCollectionEvent(debates));
      return debates;
    };

    Debate.prototype.updateGlobalHash = function() {
      return Gruff.Models.Debates[this.linkableId()] = this;
    };

    Debate.prototype.fetchSubdebates = function(options) {
      return this.answers.fetch({
        success: (function(_this) {
          return function(answers, response1) {
            return _this.argumentsFor.fetch({
              success: function(argumentsFor, response2) {
                return _this.argumentsAgainst.fetch({
                  success: function(argumentsAgainst, response3) {
                    return _this.subdebates.fetch({
                      success: function(subdebates, response4) {
                        if (options != null) {
                          if (typeof options.success === "function") {
                            options.success(subdebates, response4);
                          }
                        }
                        return _this.trigger("fetched-subdebates");
                      }
                    });
                  }
                });
              }
            });
          };
        })(this)
      });
    };

    Debate.prototype.findDebate = function(id) {
      var root;
      return Gruff.Models.Debates[id];
      root = this.findRootDebate();
      return root.findSubdebate(id);
    };

    Debate.prototype.findRootDebate = function() {
      if (this.parent != null) {
        return this.parent.findRootDebate();
      } else {
        return this;
      }
    };

    Debate.prototype.findSubdebate = function(id) {
      var result;
      if (this.linkableId() === id) {
        return this;
      }
      result = null;
      _.each([this.answers, this.argumentsFor, this.argumentsAgainst, this.subdebates], function(coll) {
        if (coll !== null && result === null) {
          return coll.each(function(debate) {
            if (result === null) {
              return result = debate.findSubdebate(id);
            }
          });
        }
      });
      return result;
    };

    Debate.prototype.getCollectionByName = function(nameStr) {
      var result;
      result = null;
      _.each(nameStr.split(" "), (function(_this) {
        return function(name) {
          switch (name) {
            case "answer":
            case "answers":
              return result = _this.answers;
            case "argumentFor":
            case "argumentsFor":
            case "for":
              return result = _this.argumentsFor;
            case "argumentAgainst":
            case "argumentsAgainst":
            case "against":
              return result = _this.argumentsAgainst;
            case "subdebate":
            case "subdebates":
              return result = _this.subdebates;
          }
        };
      })(this));
      return result;
    };

    Debate.prototype.getIdListName = function(nameStr) {
      var result;
      result = null;
      _.each(nameStr.split(" "), (function(_this) {
        return function(name) {
          switch (name) {
            case "answer":
            case "answers":
              return result = "answerIds";
            case "argumentFor":
            case "argumentsFor":
            case "for":
              return result = "argumentsForIds";
            case "argumentAgainst":
            case "argumentsAgainst":
            case "against":
              return result = "argumentsAgainstIds";
            case "subdebate":
            case "subdebates":
              return result = "subdebateIds";
          }
        };
      })(this));
      return result;
    };

    Debate.prototype.makeAddToCollectionEvent = function(coll) {
      return (function(_this) {
        return function(debate) {
          debate.parentCollection = coll;
          debate.set({
            parentId: _this.linkableId()
          });
          return _this.updateDebateIds(coll);
        };
      })(this);
    };

    Debate.prototype.makeRemoveFromCollectionEvent = function(coll) {
      return (function(_this) {
        return function(debate) {
          debate.parentCollection = null;
          debate.set({
            parentId: null
          });
          return _this.updateDebateIds(coll);
        };
      })(this);
    };

    Debate.prototype.updateDebateIds = function(debates) {
      var vals;
      vals = {};
      vals[this.getIdListName(debates.type)] = debates.pluck("_id");
      return this.set(vals);
    };

    Debate.prototype.updateUrl = function(e) {
      return this.url = "/rest/debates/" + this.id;
    };

    return Debate;

  })(Backbone.Model);

  Gruff.Collections.Debates = (function(superClass) {
    extend(Debates, superClass);

    function Debates() {
      this.add = bind(this.add, this);
      this.updateUrl = bind(this.updateUrl, this);
      return Debates.__super__.constructor.apply(this, arguments);
    }

    Debates.prototype.model = Gruff.Models.Debate;

    Debates.prototype.url = '/rest/debates';

    Debates.prototype.fullJSON = function() {
      var json;
      json = [];
      this.each((function(_this) {
        return function(debate) {
          return json.push(debate.fullJSON());
        };
      })(this));
      return json;
    };

    Debates.prototype.setParent = function(parent) {
      this.parent = parent;
      return this.parent.bind("change", this.updateUrl);
    };

    Debates.prototype.updateUrl = function(e) {
      return this.url = "/rest/debates/" + this.parent.id + "/" + this.type;
    };

    Debates.prototype.add = function(debate) {
      if (debate.length == null) {
        debate.set({
          attributeType: this.type
        });
        debate.updateUrl();
      }
      return Debates.__super__.add.call(this, debate);
    };

    return Debates;

  })(Backbone.Collection);

  classHelper = new exports.ClassHelper();

  classHelper.augmentClass(Gruff.Models.Debate, exports.Debate);

}).call(this);
